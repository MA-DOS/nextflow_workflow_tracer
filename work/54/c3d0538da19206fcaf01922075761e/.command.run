#!/bin/bash
#SBATCH -J nf-NFCORE_ATACSEQ_ATACSEQ_IGV
#SBATCH -o /storage/nf-core/exec/nextflow_workflow_tracer/work/54/c3d0538da19206fcaf01922075761e/.command.log
#SBATCH --no-requeue
#SBATCH --signal B:USR2@30
#SBATCH -t 04:00:00
#SBATCH --mem 6144M
NXF_CHDIR=/storage/nf-core/exec/nextflow_workflow_tracer/work/54/c3d0538da19206fcaf01922075761e
### ---
### name: 'NFCORE_ATACSEQ:ATACSEQ:IGV'
### container: 'quay.io/biocontainers/python:3.8.3'
### outputs:
### - '*files.txt'
### - '*.xml'
### - 'genome.fa'
### - 'genome.fa.fai'
### - 'versions.yml'
### ...
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 1 ]] && set -x
NXF_ENTRY=${1:-nxf_main}

nxf_tree() {
    local pid=$1

    declare -a ALL_CHILDREN
    while read P PP;do
        ALL_CHILDREN[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    pstat() {
        local x_pid=$1
        local STATUS=$(2> /dev/null < /proc/$1/status grep -E 'Vm|ctxt')

        if [ $? = 0 ]; then
        local  x_vsz=$(echo "$STATUS" | grep VmSize | awk '{print $2}' || echo -n '0')
        local  x_rss=$(echo "$STATUS" | grep VmRSS | awk '{print $2}' || echo -n '0')
        local x_peak=$(echo "$STATUS" | grep -E 'VmPeak|VmHWM' | sed 's/^.*:\s*//' | sed 's/[\sa-zA-Z]*$//' | tr '\n' ' ' || echo -n '0 0')
        local x_pmem=$(awk -v rss=$x_rss -v mem_tot=$mem_tot 'BEGIN {printf "%.0f", rss/mem_tot*100*10}' || echo -n '0')
        local vol_ctxt=$(echo "$STATUS" | grep '\bvoluntary_ctxt_switches' | awk '{print $2}' || echo -n '0')
        local inv_ctxt=$(echo "$STATUS" | grep '\bnonvoluntary_ctxt_switches' | awk '{print $2}' || echo -n '0')
        cpu_stat[x_pid]="$x_pid $x_pmem $x_vsz $x_rss $x_peak $vol_ctxt $inv_ctxt"
        fi
    }

    pwalk() {
        pstat $1
        for i in ${ALL_CHILDREN[$1]:=}; do pwalk $i; done
    }

    pwalk $1
}

nxf_stat() {
    cpu_stat=()
    nxf_tree $1

    declare -a sum=(0 0 0 0 0 0 0 0)
    local pid
    local i
    for pid in "${!cpu_stat[@]}"; do
        local row=(${cpu_stat[pid]})
        [ $NXF_DEBUG = 1 ] && echo "++ stat mem=${row[*]}"
        for i in "${!row[@]}"; do
        if [ $i != 0 ]; then
            sum[i]=$((sum[i]+row[i]))
        fi
        done
    done

    [ $NXF_DEBUG = 1 ] && echo -e "++ stat SUM=${sum[*]}"

    for i in {1..7}; do
        if [ ${sum[i]} -lt ${cpu_peak[i]} ]; then
            sum[i]=${cpu_peak[i]}
        else
            cpu_peak[i]=${sum[i]}
        fi
    done

    [ $NXF_DEBUG = 1 ] && echo -e "++ stat PEAK=${sum[*]}\n"
    nxf_stat_ret=(${sum[*]})
}

nxf_mem_watch() {
    set -o pipefail
    local pid=$1
    local trace_file=.command.trace
    local count=0;
    declare -a cpu_stat=(0 0 0 0 0 0 0 0)
    declare -a cpu_peak=(0 0 0 0 0 0 0 0)
    local mem_tot=$(< /proc/meminfo grep MemTotal | awk '{print $2}')
    local timeout
    local DONE
    local STOP=''

    [ $NXF_DEBUG = 1 ] && nxf_sleep 0.2 && ps fx

    while true; do
        nxf_stat $pid
        if [ $count -lt 10 ]; then timeout=1;
        elif [ $count -lt 120 ]; then timeout=5;
        else timeout=30;
        fi
        read -t $timeout -r DONE || true
        [[ $DONE ]] && break
        if [ ! -e /proc/$pid ]; then
            [ ! $STOP ] && STOP=$(nxf_date)
            [ $(($(nxf_date)-STOP)) -gt 10000 ] && break
        fi
        count=$((count+1))
    done

    echo "%mem=${nxf_stat_ret[1]}"      >> $trace_file
    echo "vmem=${nxf_stat_ret[2]}"      >> $trace_file
    echo "rss=${nxf_stat_ret[3]}"       >> $trace_file
    echo "peak_vmem=${nxf_stat_ret[4]}" >> $trace_file
    echo "peak_rss=${nxf_stat_ret[5]}"  >> $trace_file
    echo "vol_ctxt=${nxf_stat_ret[6]}"  >> $trace_file
    echo "inv_ctxt=${nxf_stat_ret[7]}"  >> $trace_file
}

nxf_write_trace() {
    echo "nextflow.trace/v2"           > $trace_file
    echo "realtime=$wall_time"         >> $trace_file
    echo "%cpu=$ucpu"                  >> $trace_file
    echo "cpu_model=$cpu_model"        >> $trace_file
    echo "rchar=${io_stat1[0]}"        >> $trace_file
    echo "wchar=${io_stat1[1]}"        >> $trace_file
    echo "syscr=${io_stat1[2]}"        >> $trace_file
    echo "syscw=${io_stat1[3]}"        >> $trace_file
    echo "read_bytes=${io_stat1[4]}"   >> $trace_file
    echo "write_bytes=${io_stat1[5]}"  >> $trace_file
}

nxf_trace_mac() {
    local start_millis=$(nxf_date)

    /bin/bash -euo pipefail /storage/nf-core/exec/nextflow_workflow_tracer/work/54/c3d0538da19206fcaf01922075761e/.command.sh

    local end_millis=$(nxf_date)
    local wall_time=$((end_millis-start_millis))
    local ucpu=''
    local cpu_model=''
    local io_stat1=('' '' '' '' '' '')
    nxf_write_trace
}

nxf_fd() {
    local FD=11
    while [ -e /proc/$$/fd/$FD ]; do FD=$((FD+1)); done
    echo $FD
}

nxf_trace_linux() {
    local pid=$$
    command -v ps &>/dev/null || { >&2 echo "Command 'ps' required by nextflow to collect task metrics cannot be found"; exit 1; }
    local num_cpus=$(< /proc/cpuinfo grep '^processor' -c)
    local cpu_model=$(< /proc/cpuinfo grep '^model name' | head -n 1 | awk 'BEGIN{FS="\t: "} { print $2 }')
    local tot_time0=$(grep '^cpu ' /proc/stat | awk '{sum=$2+$3+$4+$5+$6+$7+$8+$9; printf "%.0f",sum}')
    local cpu_time0=$(2> /dev/null < /proc/$pid/stat awk '{printf "%.0f", ($16+$17)*10 }' || echo -n 'X')
    local io_stat0=($(2> /dev/null < /proc/$pid/io sed 's/^.*:\s*//' | head -n 6 | tr '\n' ' ' || echo -n '0 0 0 0 0 0'))
    local start_millis=$(nxf_date)
    trap 'kill $mem_proc' ERR
    
    /bin/bash -euo pipefail /storage/nf-core/exec/nextflow_workflow_tracer/work/54/c3d0538da19206fcaf01922075761e/.command.sh &
    local task=$!

    mem_fd=$(nxf_fd)
    eval "exec $mem_fd> >(nxf_mem_watch $task)"
    local mem_proc=$!

    wait $task

    local end_millis=$(nxf_date)
    local tot_time1=$(grep '^cpu ' /proc/stat | awk '{sum=$2+$3+$4+$5+$6+$7+$8+$9; printf "%.0f",sum}')
    local cpu_time1=$(2> /dev/null < /proc/$pid/stat awk '{printf "%.0f", ($16+$17)*10 }' || echo -n 'X')
    local ucpu=$(awk -v p1=$cpu_time1 -v p0=$cpu_time0 -v t1=$tot_time1 -v t0=$tot_time0 -v n=$num_cpus 'BEGIN { pct=(p1-p0)/(t1-t0)*100*n; printf("%.0f", pct>0 ? pct : 0) }' )

    local io_stat1=($(2> /dev/null < /proc/$pid/io sed 's/^.*:\s*//' | head -n 6 | tr '\n' ' ' || echo -n '0 0 0 0 0 0'))
    local i
    for i in {0..5}; do
        io_stat1[i]=$((io_stat1[i]-io_stat0[i]))
    done

    local wall_time=$((end_millis-start_millis))
    [ $NXF_DEBUG = 1 ] && echo "+++ STATS %CPU=$ucpu TIME=$wall_time I/O=${io_stat1[*]}"

    echo "nextflow.trace/v2"           > $trace_file
    echo "realtime=$wall_time"         >> $trace_file
    echo "%cpu=$ucpu"                  >> $trace_file
    echo "cpu_model=$cpu_model"        >> $trace_file
    echo "rchar=${io_stat1[0]}"        >> $trace_file
    echo "wchar=${io_stat1[1]}"        >> $trace_file
    echo "syscr=${io_stat1[2]}"        >> $trace_file
    echo "syscw=${io_stat1[3]}"        >> $trace_file
    echo "read_bytes=${io_stat1[4]}"   >> $trace_file
    echo "write_bytes=${io_stat1[5]}"  >> $trace_file

    [ -e /proc/$mem_proc ] && eval "echo 'DONE' >&$mem_fd" || true
    wait $mem_proc 2>/dev/null || true
    while [ -e /proc/$mem_proc ]; do nxf_sleep 0.1; done
}

nxf_trace() {
    local trace_file=.command.trace
    touch $trace_file
    if [[ $(uname) = Darwin ]]; then
        nxf_trace_mac
    else
        nxf_trace_linux
    fi
}
nxf_container_env() {
cat << EOF
export PYTHONNOUSERSITE="1"
export R_PROFILE_USER="/.Rprofile"
export R_ENVIRON_USER="/.Renviron"
export JULIA_DEPOT_PATH="/usr/local/share/julia"
export PATH="\$PATH:/home/niklas/.nextflow/assets/nf-core/atacseq/bin"
EOF
}

nxf_sleep() {
  sleep $1 2>/dev/null || sleep 1;
}

nxf_date() {
    local ts=$(date +%s%3N);
    if [[ ${#ts} == 10 ]]; then echo ${ts}000
    elif [[ $ts == *%3N ]]; then echo ${ts/\%3N/000}
    elif [[ $ts == *3N ]]; then echo ${ts/3N/000}
    elif [[ ${#ts} == 13 ]]; then echo $ts
    else echo "Unexpected timestamp value: $ts"; exit 1
    fi
}

nxf_env() {
    echo '============= task environment ============='
    env | sort | sed "s/\(.*\)AWS\(.*\)=\(.\{6\}\).*/\1AWS\2=\3xxxxxxxxxxxxx/"
    echo '============= task output =================='
}

nxf_kill() {
    declare -a children
    while read P PP;do
        children[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    kill_all() {
        [[ $1 != $$ ]] && kill $1 2>/dev/null || true
        for i in ${children[$1]:=}; do kill_all $i; done
    }

    kill_all $1
}

nxf_mktemp() {
    local base=${1:-/tmp}
    mkdir -p "$base"
    if [[ $(uname) = Darwin ]]; then mktemp -d $base/nxf.XXXXXXXXXX
    else TMPDIR="$base" mktemp -d -t nxf.XXXXXXXXXX
    fi
}

nxf_fs_copy() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  cp -fRL $source $target/$basedir
}

nxf_fs_move() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  mv -f $source $target/$basedir
}

nxf_fs_rsync() {
  rsync -rRl $1 $2
}

nxf_fs_rclone() {
  rclone copyto $1 $2/$1
}

nxf_fs_fcp() {
  fcp $1 $2/$1
}

on_exit() {
    exit_status=${nxf_main_ret:=$?}
    printf -- $exit_status > /storage/nf-core/exec/nextflow_workflow_tracer/work/54/c3d0538da19206fcaf01922075761e/.exitcode
    set +u
    docker rm $NXF_BOXID &>/dev/null || true
    exit $exit_status
}

on_term() {
    set +e
    docker stop $NXF_BOXID
}

nxf_launch() {
    docker run -i --cpu-shares 1024 --memory 6144m -e "NXF_TASK_WORKDIR" -e "NXF_DEBUG=${NXF_DEBUG:=0}" -v /storage/nf-core/exec/nextflow_workflow_tracer/work:/storage/nf-core/exec/nextflow_workflow_tracer/work -v /home/niklas/.nextflow/assets/nf-core/atacseq/bin:/home/niklas/.nextflow/assets/nf-core/atacseq/bin -w "$NXF_TASK_WORKDIR" --name $NXF_BOXID quay.io/biocontainers/python:3.8.3 /bin/bash -c "eval $(nxf_container_env); /bin/bash /storage/nf-core/exec/nextflow_workflow_tracer/work/54/c3d0538da19206fcaf01922075761e/.command.run nxf_trace"
}

nxf_stage() {
    true
    # stage input files
    rm -f bwa/merged_library/macs2/broad_peak/consensus/consensus_peaks.mLb.clN.bed
    rm -f bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T0_PE_REP2.mLb.clN_peaks.broadPeak
    rm -f bwa/merged_replicate/macs2/broad_peak/OSMOTIC_STRESS_T0_PE.mRp.clN_peaks.broadPeak
    rm -f bwa/merged_library/bigwig/OSMOTIC_STRESS_T0_PE_REP2.mLb.clN.bigWig
    rm -f bwa/merged_replicate/bigwig/OSMOTIC_STRESS_T0_PE.mRp.clN.bigWig
    rm -f bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T100_SE_REP2.mLb.clN_peaks.broadPeak
    rm -f bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T150_SE_REP1.mLb.clN_peaks.broadPeak
    rm -f bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T15_PE_REP1.mLb.clN_peaks.broadPeak
    rm -f bwa/merged_replicate/macs2/broad_peak/consensus/consensus_peaks.mRp.clN.bed
    rm -f bwa/merged_library/bigwig/OSMOTIC_STRESS_T150_SE_REP1.mLb.clN.bigWig
    rm -f genome.fa.fai
    rm -f bwa/merged_library/bigwig/OSMOTIC_STRESS_T100_SE_REP2.mLb.clN.bigWig
    rm -f bwa/merged_replicate/bigwig/OSMOTIC_STRESS_T100_SE.mRp.clN.bigWig
    rm -f bwa/merged_library/bigwig/OSMOTIC_STRESS_T15_PE_REP1.mLb.clN.bigWig
    rm -f bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T0_PE_REP1.mLb.clN_peaks.broadPeak
    rm -f genome.fa
    rm -f bwa/merged_library/bigwig/OSMOTIC_STRESS_T100_SE_REP1.mLb.clN.bigWig
    rm -f bwa/merged_library/bigwig/OSMOTIC_STRESS_T0_PE_REP1.mLb.clN.bigWig
    rm -f bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T100_SE_REP1.mLb.clN_peaks.broadPeak
    rm -f bwa/merged_replicate/macs2/broad_peak/OSMOTIC_STRESS_T100_SE.mRp.clN_peaks.broadPeak
    mkdir -p bwa/merged_library/macs2/broad_peak/consensus && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/de/693b370a6faa9d29899fbd143df0c2/consensus_peaks.mLb.clN.bed bwa/merged_library/macs2/broad_peak/consensus/consensus_peaks.mLb.clN.bed
    mkdir -p bwa/merged_library/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/03/7b5b19a31b48bbc6decf1a995452c0/OSMOTIC_STRESS_T0_PE_REP2.mLb.clN_peaks.broadPeak bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T0_PE_REP2.mLb.clN_peaks.broadPeak
    mkdir -p bwa/merged_replicate/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/17/df809dd264b364905aeccf70735d42/OSMOTIC_STRESS_T0_PE.mRp.clN_peaks.broadPeak bwa/merged_replicate/macs2/broad_peak/OSMOTIC_STRESS_T0_PE.mRp.clN_peaks.broadPeak
    mkdir -p bwa/merged_library/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/99/9b13326340a247c4e85e0e81ea376b/OSMOTIC_STRESS_T0_PE_REP2.mLb.clN.bigWig bwa/merged_library/bigwig/OSMOTIC_STRESS_T0_PE_REP2.mLb.clN.bigWig
    mkdir -p bwa/merged_replicate/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/21/8ca220f18b518f789675f1fc0b6f02/OSMOTIC_STRESS_T0_PE.mRp.clN.bigWig bwa/merged_replicate/bigwig/OSMOTIC_STRESS_T0_PE.mRp.clN.bigWig
    mkdir -p bwa/merged_library/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/2e/9b518b54613f00264c8a16fcb7b75c/OSMOTIC_STRESS_T100_SE_REP2.mLb.clN_peaks.broadPeak bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T100_SE_REP2.mLb.clN_peaks.broadPeak
    mkdir -p bwa/merged_library/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/aa/238b0ec850c83f4c70654f8085efce/OSMOTIC_STRESS_T150_SE_REP1.mLb.clN_peaks.broadPeak bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T150_SE_REP1.mLb.clN_peaks.broadPeak
    mkdir -p bwa/merged_library/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/ea/1c34a12880f70b5732cf91da2e95aa/OSMOTIC_STRESS_T15_PE_REP1.mLb.clN_peaks.broadPeak bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T15_PE_REP1.mLb.clN_peaks.broadPeak
    mkdir -p bwa/merged_replicate/macs2/broad_peak/consensus && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/54/ca7277a81b09e007e2bcb879c094c8/consensus_peaks.mRp.clN.bed bwa/merged_replicate/macs2/broad_peak/consensus/consensus_peaks.mRp.clN.bed
    mkdir -p bwa/merged_library/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/9e/586c1aa27ccc73f66f63206aa79af8/OSMOTIC_STRESS_T150_SE_REP1.mLb.clN.bigWig bwa/merged_library/bigwig/OSMOTIC_STRESS_T150_SE_REP1.mLb.clN.bigWig
    ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/c8/eba00934f832aeafc8a79d8b5eecbd/genome.fa.fai genome.fa.fai
    mkdir -p bwa/merged_library/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/83/e4c7d2d7d04abf2dbd7f7da2f51139/OSMOTIC_STRESS_T100_SE_REP2.mLb.clN.bigWig bwa/merged_library/bigwig/OSMOTIC_STRESS_T100_SE_REP2.mLb.clN.bigWig
    mkdir -p bwa/merged_replicate/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/10/7e51fa2228125dfbf35d0e2f6ad05a/OSMOTIC_STRESS_T100_SE.mRp.clN.bigWig bwa/merged_replicate/bigwig/OSMOTIC_STRESS_T100_SE.mRp.clN.bigWig
    mkdir -p bwa/merged_library/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/80/db6fea2ab72dd03f53b5b518f2ab7e/OSMOTIC_STRESS_T15_PE_REP1.mLb.clN.bigWig bwa/merged_library/bigwig/OSMOTIC_STRESS_T15_PE_REP1.mLb.clN.bigWig
    mkdir -p bwa/merged_library/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/e5/49114a74a568ed6a70d2be35d8c6b6/OSMOTIC_STRESS_T0_PE_REP1.mLb.clN_peaks.broadPeak bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T0_PE_REP1.mLb.clN_peaks.broadPeak
    ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/stage-5bff9178-5385-47c6-ba7e-45f48658c605/fa/d35fc82e4737b969d8521d34b50add/genome.fa genome.fa
    mkdir -p bwa/merged_library/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/a7/1a199404a8b6fd2b18fd11942d84c0/OSMOTIC_STRESS_T100_SE_REP1.mLb.clN.bigWig bwa/merged_library/bigwig/OSMOTIC_STRESS_T100_SE_REP1.mLb.clN.bigWig
    mkdir -p bwa/merged_library/bigwig && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/f6/8246cc61a8ffa4b215e15efacf91ba/OSMOTIC_STRESS_T0_PE_REP1.mLb.clN.bigWig bwa/merged_library/bigwig/OSMOTIC_STRESS_T0_PE_REP1.mLb.clN.bigWig
    mkdir -p bwa/merged_library/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/58/f5998b993f60f0627e4efc27a725da/OSMOTIC_STRESS_T100_SE_REP1.mLb.clN_peaks.broadPeak bwa/merged_library/macs2/broad_peak/OSMOTIC_STRESS_T100_SE_REP1.mLb.clN_peaks.broadPeak
    mkdir -p bwa/merged_replicate/macs2/broad_peak && ln -s /storage/nf-core/exec/nextflow_workflow_tracer/work/46/805bdcce52fe35038b07e6b13f2f9b/OSMOTIC_STRESS_T100_SE.mRp.clN_peaks.broadPeak bwa/merged_replicate/macs2/broad_peak/OSMOTIC_STRESS_T100_SE.mRp.clN_peaks.broadPeak
}

nxf_unstage() {
    true
    [[ ${nxf_main_ret:=0} != 0 ]] && return
}

nxf_main() {
    trap on_exit EXIT
    trap on_term TERM INT USR2
    trap '' USR1

    [[ "${NXF_CHDIR:-}" ]] && cd "$NXF_CHDIR"
    export NXF_BOXID="nxf-$(dd bs=18 count=1 if=/dev/urandom 2>/dev/null | base64 | tr +/ 0A | tr -d '\r\n')"
    NXF_SCRATCH=''
    [[ $NXF_DEBUG > 0 ]] && nxf_env
    touch /storage/nf-core/exec/nextflow_workflow_tracer/work/54/c3d0538da19206fcaf01922075761e/.command.begin
    set +u
    set -u
    [[ $NXF_SCRATCH ]] && cd $NXF_SCRATCH
    export NXF_TASK_WORKDIR="$PWD"
    nxf_stage

    set +e
    (set -o pipefail; (nxf_launch | tee .command.out) 3>&1 1>&2 2>&3 | tee .command.err) &
    pid=$!
    wait $pid || nxf_main_ret=$?
    nxf_unstage
}

$NXF_ENTRY
